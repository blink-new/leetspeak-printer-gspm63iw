import { useState } from 'react'
import { Button } from './components/ui/button'
import { Textarea } from './components/ui/textarea'
import { Switch } from './components/ui/switch'
import { 
  Sparkles, 
  MessageSquare, 
  History, 
  Settings,
  ArrowUp
} from 'lucide-react'
import { toast } from 'react-hot-toast'

// Convert text to leetspeak
const convertToLeetspeak = (text: string): string => {
  const leetMap: { [key: string]: string } = {
    'a': '4', 'A': '4',
    'e': '3', 'E': '3',
    'i': '1', 'I': '1',
    'o': '0', 'O': '0',
    's': '5', 'S': '5',
    't': '7', 'T': '7',
    'l': '1', 'L': '1',
    'g': '9', 'G': '9',
    'b': '6', 'B': '6'
  }
  
  return text.split('').map(char => leetMap[char] || char).join('')
}

// Convert to markdown format
const convertToMarkdown = (text: string): string => {
  const leetText = convertToLeetspeak(text)
  return `# ${leetText}\n\n**Original:** ${text}\n\n**Leetspeak:** ${leetText}\n\n---\n\n*Generated by Leetspeak Printer*`
}

// Suggested prompts in Arabic
const suggestedPrompts = [
  "أنشئ متجر إلكتروني لبيع الملابس",
  "طور تطبيق توصيل طعام",
  "اصنع موقع شركة احترافي"
]

function App() {
  const [inputText, setInputText] = useState('')
  const [outputMarkdown, setOutputMarkdown] = useState('')
  const [isPublic, setIsPublic] = useState(true)
  const [isProcessing, setIsProcessing] = useState(false)

  const handleConvert = async () => {
    if (!inputText.trim()) {
      toast.error('يرجى إدخال النص المراد تحويله!')
      return
    }

    setIsProcessing(true)
    
    // Simulate processing delay for better UX
    await new Promise(resolve => setTimeout(resolve, 1000))
    
    const markdown = convertToMarkdown(inputText.trim())
    setOutputMarkdown(markdown)
    setIsProcessing(false)
    
    toast.success('تم تحويل النص بنجاح!')
  }

  const copyToClipboard = async () => {
    if (!outputMarkdown) return
    
    try {
      await navigator.clipboard.writeText(outputMarkdown)
      toast.success('تم نسخ النص!')
    } catch {
      toast.error('فشل في نسخ النص')
    }
  }

  const handleSuggestedPrompt = (prompt: string) => {
    setInputText(prompt)
    toast.success('تم إدراج الاقتراح!')
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-900 via-purple-900 to-indigo-900 text-white" dir="rtl">
      
      {/* Animated Background Effects */}
      <div className="fixed inset-0 opacity-20">
        <div className="absolute top-20 left-20 w-72 h-72 bg-cyan-500 rounded-full mix-blend-multiply filter blur-xl animate-pulse"></div>
        <div className="absolute top-40 right-20 w-72 h-72 bg-purple-500 rounded-full mix-blend-multiply filter blur-xl animate-pulse delay-700"></div>
        <div className="absolute bottom-20 left-1/2 w-72 h-72 bg-pink-500 rounded-full mix-blend-multiply filter blur-xl animate-pulse delay-1000"></div>
      </div>

      <div className="relative z-10">
        {/* Main Content */}
        <main className="container mx-auto px-4 py-8 max-w-2xl">
          
          {/* Hero Section */}
          <div className="text-center mb-12">
            {/* Star Icon */}
            <div className="w-20 h-20 bg-gradient-to-r from-cyan-400 to-purple-400 rounded-full flex items-center justify-center mx-auto mb-8 shadow-2xl opacity-90">
              <Sparkles className="w-10 h-10 text-white" />
            </div>
            
            {/* Main Heading */}
            <h1 className="text-4xl md:text-5xl font-black mb-4 bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent leading-tight">
              Build something<br />Lovable
            </h1>
            
            {/* Subtitle */}
            <p className="text-lg text-gray-300 max-w-md mx-auto mb-12">
              Create apps and websites by<br />chatting with AI
            </p>

            {/* Main Input Area */}
            <div className="bg-gray-900/40 backdrop-blur-sm rounded-2xl p-1 border border-gray-700/50 mb-8">
              <div className="bg-gray-800/50 rounded-xl p-4">
                <Textarea
                  placeholder="Ask Lovable to create an internal tool that..."
                  value={inputText}
                  onChange={(e) => setInputText(e.target.value)}
                  className="w-full min-h-20 bg-transparent border-none text-white placeholder-gray-400 text-base resize-none focus:ring-0 focus-visible:ring-0"
                  dir="ltr"
                />
                
                <div className="flex justify-between items-center mt-4">
                  <div className="flex items-center gap-3">
                    <Button
                      size="sm"
                      variant="ghost"
                      className="w-6 h-6 p-0 rounded-full bg-white/10 hover:bg-white/20 text-white"
                    >
                      <ArrowUp className="w-3 h-3" />
                    </Button>
                    <div className="flex items-center gap-2">
                      <Switch 
                        checked={isPublic} 
                        onCheckedChange={setIsPublic}
                        className="data-[state=checked]:bg-cyan-500"
                      />
                      <span className="text-sm text-gray-300 font-medium">Public</span>
                    </div>
                  </div>
                  
                  <Button 
                    onClick={handleConvert}
                    disabled={isProcessing}
                    className="bg-gradient-to-r from-cyan-500 to-purple-500 hover:from-cyan-600 hover:to-purple-600 text-white font-semibold px-6 py-2 rounded-xl transition-all duration-300 transform hover:scale-105 disabled:opacity-50"
                  >
                    {isProcessing ? 'جارٍ التحويل...' : 'تحويل إلى Leetspeak'}
                  </Button>
                </div>
              </div>
            </div>
          </div>

          {/* Quick Suggestions */}
          <div className="mb-12">
            <h3 className="text-center text-sm font-medium mb-4 text-gray-400">
              اقتراحات سريعة
            </h3>
            <div className="space-y-3">
              {suggestedPrompts.map((suggestion, index) => (
                <Button
                  key={index}
                  variant="outline"
                  onClick={() => handleSuggestedPrompt(suggestion)}
                  className="w-full border-gray-700/50 text-gray-300 hover:bg-gray-800/50 hover:text-white h-auto p-3 text-sm bg-gray-900/20 backdrop-blur-sm justify-start"
                >
                  {suggestion}
                </Button>
              ))}
            </div>
          </div>

          {/* Output Area */}
          {outputMarkdown && (
            <div className="mb-12">
              <div className="bg-gray-900/40 backdrop-blur-sm rounded-2xl p-6 border border-gray-700/50">
                <div className="flex justify-between items-center mb-4">
                  <h3 className="text-lg font-semibold text-white">النتيجة:</h3>
                  <Button
                    onClick={copyToClipboard}
                    variant="outline"
                    size="sm"
                    className="border-gray-700/50 text-gray-300 hover:bg-gray-800/50"
                  >
                    نسخ
                  </Button>
                </div>
                <pre className="text-gray-300 text-sm whitespace-pre-wrap overflow-x-auto" dir="ltr">
                  {outputMarkdown}
                </pre>
              </div>
            </div>
          )}

          {/* Stats Section */}
          <div className="grid grid-cols-3 gap-4 mb-12">
            <div className="text-center">
              <div className="text-3xl font-bold text-cyan-400 mb-2 flex items-center justify-center">
                0
              </div>
              <div className="text-gray-400 text-sm">مشاريع</div>
            </div>
            <div className="text-center">
              <div className="text-3xl font-bold text-purple-400 mb-2 flex items-center justify-center">
                ∞
              </div>
              <div className="text-gray-400 text-sm">إمكانيات</div>
            </div>
            <div className="text-center">
              <div className="text-3xl font-bold text-pink-400 mb-2 flex items-center justify-center">
                24/7
              </div>
              <div className="text-gray-400 text-sm">متاح</div>
            </div>
          </div>
        </main>

        {/* Bottom Navigation */}
        <div className="fixed bottom-6 left-1/2 transform -translate-x-1/2">
          <div className="bg-gray-900/40 backdrop-blur-lg rounded-full p-2 border border-gray-700/50">
            <div className="flex items-center gap-1">
              <Button variant="ghost" size="sm" className="rounded-full text-white hover:bg-white/20 bg-white/10">
                <Sparkles className="w-5 h-5" />
              </Button>
              <Button variant="ghost" size="sm" className="rounded-full text-white hover:bg-white/20">
                <MessageSquare className="w-5 h-5" />
              </Button>
              <Button variant="ghost" size="sm" className="rounded-full text-white hover:bg-white/20">
                <History className="w-5 h-5" />
              </Button>
              <Button variant="ghost" size="sm" className="rounded-full text-white hover:bg-white/20">
                <Settings className="w-5 h-5" />
              </Button>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}

export default App